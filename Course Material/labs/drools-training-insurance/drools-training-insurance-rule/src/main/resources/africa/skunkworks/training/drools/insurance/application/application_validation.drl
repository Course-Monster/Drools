package africa.skunkworks.training.drools.insurance.application;

import africa.skunkworks.training.drools.insurance.domain.dto.ApplicationDto;
import africa.skunkworks.training.drools.insurance.domain.enums.Status;

global africa.skunkworks.training.drools.insurance.domain.response.ApplicationResponse applicationResponse;

dialect  "java"

rule "Invalidate application if not employed"
    agenda-group "not-employed"
    when
        $application: ApplicationDto( !isEmployed )
    then
        modify($application) {
            setStatus(Status.DENIED),
            setReason( $application.getApplicationNumber() + ": Invalid – Unemployed")
        }
end

rule "Invalidate application from minor"
    agenda-group "application-minor"
    when
        $application: ApplicationDto( clientAge < 18 )

    then
        modify($application) {
            setStatus(Status.DENIED),
            setReason( $application.getApplicationNumber() + ": Invalid – Minor")
        }
end

rule "Invalid application – has pre-existing conditions"
    agenda-group "application-pec"
    when
        $application: ApplicationDto( pec )
    then
        modify($application) {
            setStatus(Status.DENIED),
            setReason( $application.getApplicationNumber() + ": Invalid – Client has PEC")
        }
end

rule "Valid Application"
    agenda-group "valid-application"
    when
        $application: ApplicationDto( status == Status.PENDING )
    then
        modify($application) {
            setReason($application.getApplicationNumber() + ": Approval Granted!"),
            setStatus(Status.APPROVED)
        }
end
